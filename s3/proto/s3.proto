syntax = "proto3";

service S3 {
	
	rpc ListBuckets(BaseRequest) returns (ListBucketsResponse) {}
	rpc CreateBucket(Bucket) returns (BaseResponse) {}
	rpc DeleteBucket(Bucket) returns (BaseResponse) {}
	rpc GetBucket(Bucket) returns (Bucket) {}
	rpc ListObjects(ListObjectsRequest) returns (ListObjectResponse) {}
	rpc CreateObject(Object) returns (BaseResponse) {}
	rpc UpdateObject(Object) returns (BaseResponse) {}
	rpc GetObject(GetObjectInput) returns (Object) {}
	rpc DeleteObject(DeleteObjectInput) returns (BaseResponse) {}
	rpc GetTierMap(BaseRequest) returns (GetTierMapResponse) {}
	rpc UpdateObjMeta(UpdateObjMetaRequest) returns (BaseResponse) {}
    rpc GetStorageClasses(BaseRequest) returns (GetStorageClassesResponse) {}
	rpc GetBackendTypeByTier(GetBackendTypeByTierRequest) returns (GetBackendTypeByTierResponse) {}
}

message ACL {
	string canned = 1;
	repeated string FULL_CONTROL = 2;
	repeated string WRITE = 3;
	repeated string WRITE_ACP = 4;
	repeated string READ = 5;
	repeated string READ_ACP = 6;
}

message ServerSideEncryption {
	string cryptScheme = 1;
	string algorithm = 2;
	string masterKeyId = 3;
	bool mandtory = 4;
}

message VersioningConfiguration {
	string Status = 1;
	string MfaDelete = 2;
}

message RedirectAllRequestsTo {
	string hostName = 1;
	repeated string protocol = 2;
}

message Redirect {
	string protocol = 1;
	string hostName = 2;
	string replaceKeyPrefixWith = 3;
	string replaceKeyWith = 4;
	string httpRedirectCode = 5;
}

message Condition {
	string keyPrefixEquals = 1;
	string httpErrorCodeReturnedEquals = 2;
}

message RoutingRules {
	Redirect redirect = 1; 
	Condition condition = 2;
}

message WebsiteConfiguration {
	string indexDocument = 1;
	string errorDocument = 2;
	RedirectAllRequestsTo redirectAllRequestsTo = 3;
	repeated RoutingRules routingRules = 4;
}

message CORSConfiguration {
	string id = 1;
	string allowedMethods = 2;
	string allowedOrigins = 3;
	string allowedHeaders = 4;
	string maxAgeSeconds = 5;
	string exposedHeaders = 6;
}

message Destination {
	string bucket = 1;
	string storageClass = 2;
}

message ReplicationRole {
	string id = 1;
	string prefix = 2;
	bool enabled = 3;
	Destination destination = 4;
}

message ReplicationConfiguration {
	string role = 1;
	repeated ReplicationRole rules = 2;
}

message Tag {
	string key = 1;
	string val = 2;
}

message LifecycleFilter {
	string prefix = 1;
	repeated Tag tags = 2;  //Do not support tags right now --20190321
}

message Action {
	string name = 1;   //expiration or transition
	int32 days = 2;
	string deleteMarker = 4;  //for versioning
	int32 tier = 5;  //only for transition
	string backend = 6;		  //for cross-cloud transition, if it is not set, that means in-cloud transition
}

message LifecycleRule {
	string id = 1;
	string status = 2;
	LifecycleFilter filter = 3;
	repeated Action actions = 4;
}

message ReplicationInfo {
	string status = 1;
	string backend = 2;
	string storageClass = 3;
}

message Bucket {
	string name = 1;
	string owner = 2;
	string ownerDisplayName = 3;
	ACL acl = 4;
    int64 creationDate = 5;
	bool transient = 6;
	bool deleted = 7;
	ServerSideEncryption serverSideEncryption = 8;
	VersioningConfiguration versioningConfiguration = 9;
	string backend = 10;
	WebsiteConfiguration websiteConfiguration = 11;
	CORSConfiguration cors = 12;
	ReplicationConfiguration replicationConfiguration = 13;
	//string storageClass = 14;
	repeated LifecycleRule lifecycleConfiguration = 14;
}

message Partion {
	string key = 1;
	string partNumber = 2;
	int64 size = 3;
	string etag = 4;
	int64 lastModified = 5;
}

message Version {
    string versionid = 1;
    string etag = 2;
    string isLatest = 3;
    int64 lastModified = 4;
    int64 size = 5;
}

message Object {
	string objectKey = 1;
	string bucketName = 2;
	string owner = 3;
	string ownerDisplayName = 4;
	string cacheControl = 5;
	string contentDisposition = 6;
	string contentEncoding = 7;
	string expires = 8;
	string contentLength = 9;
	string contentType = 10;
	string contentMd5 = 11;
	repeated Version versions = 12;
	string storageClass = 13;
	ServerSideEncryption serverSideEncryption = 14;
	string websiteRedirectLocation = 15;
	ACL acl = 16;
	string backend = 17;
	string isNull = 18;
	string isDeleteMarker = 19;
	repeated ReplicationInfo replicationInfo = 20;
	int64 size = 21;
	repeated Partion partions = 22;
	repeated Tag tags = 23;
	int64 lastModified = 24;
	string initFlag = 25;
	string ETag = 26;
	int32 tier = 27;
}


message ListBucketsResponse {
	repeated Bucket buckets = 1;
}


message BaseResponse {
	string errorCode = 1;
	string msg = 2;
}

message BaseRequest {
	string id = 1;
}

message ListObjectsRequest {
    // Bucket is a required field
    string Bucket = 1;
    string Delimiter = 2;
    string Owner = 3;
	map<string, string> Filter = 4;
	int32  offset = 5;
	int32  limit = 6;
}

message ListObjectResponse {
	repeated Object ListObjects = 1;
}

message DeleteObjectInput {
    string Bucket = 1;
    string Key = 2;
    string Versionid = 3;
}

message GetObjectInput {
    string Bucket = 1;
    string Key = 2;
    string Versionid = 3;
}

message MultipartUpload {
    string Bucket = 1;
    string Key = 2;
    string uploadId = 3;
}

message ListParts {
    string Bucket = 1;
    string Key = 2;
    string uploadId = 3;
    int64	MaxParts = 4;
    int64	PartNumberMarker = 5;
}

message TList {
	repeated int32 Tier = 1;
}

message Tier2ClassName {
	map<int32, string> lst = 1;
}

message GetTierMapResponse {
	repeated string Transition = 1;  //format:[from:to from:to ....]
	map<string, Tier2ClassName> Tier2Name = 2;
}

message UpdateObjMetaRequest {
	string ObjKey = 1;
	string BucketName = 2;
	int64 LastModified = 3;
    map<string, string> Setting = 4;
}

message StorageClass {
    string Name = 1;
    int32  Tier = 2;
}

message GetStorageClassesResponse {
    repeated StorageClass classes = 1;
}

message GetBackendTypeByTierRequest {
	int32 Tier = 1;
}

message GetBackendTypeByTierResponse {
	repeated string Types = 1;
}